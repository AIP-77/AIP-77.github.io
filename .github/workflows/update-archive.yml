name: Sync Archive from Google Drive

on:
  schedule:
    - cron: '0 5 * * *'  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø–æ –ï–ö–ë (UTC+5)
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm init -y && npm install node-fetch@2

      - name: Sync archive files from Google Drive
        env:
          # –£–∫–∞–∂–∏—Ç–µ ID —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive
          ARCHIVE_FILES: |
            2025-09 fullData.json:1qAMfjSXpoeExA-sjTHMZ7_26TBx8ULbO
            2025-10 fullData.json:1qAMfjSXpoeExA-sjTHMZ7_26TBx8ULbO
            # –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ –º–µ—Å—è—Ü—ã –ø–æ –º–µ—Ä–µ –ø–æ—è–≤–ª–µ–Ω–∏—è
        run: |
          mkdir -p archive
          node <<'EOF'
          const fs = require('fs');
          const fetch = require('node-fetch');

          const archiveList = process.env.ARCHIVE_FILES
            .split('\n')
            .map(line => line.trim())
            .filter(line => line && !line.startsWith('#'))
            .map(line => {
              const [name, id] = line.split(':');
              return { name: name.trim(), id: id.trim() };
            });

          async function downloadFile(fileName, fileId) {
            const url = `https://drive.google.com/uc?export=download&id=${fileId}`;
            try {
              const response = await fetch(url);
              if (!response.ok) throw new Error(`HTTP ${response.status}`);
              const text = await response.text();
              fs.writeFileSync(`archive/${fileName}`, text, 'utf8');
              console.log(`‚úÖ ${fileName}`);
            } catch (err) {
              console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å ${fileName}: ${err.message}`);
            }
          }

          async function main() {
            for (const file of archiveList) {
              await downloadFile(file.name, file.id);
              // –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏
              await new Promise(r => setTimeout(r, 1000));
            }
          }

          main().catch(console.error);
          EOF

      - name: Build fullData.json from archives
        run: |
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');

          const archiveDir = './archive';
          const files = fs.readdirSync(archiveDir).filter(f => f.endsWith('.json'));

          let allRecords = [];
          let lastUpdated = new Date().toISOString();

          for (const file of files) {
            try {
              const content = fs.readFileSync(path.join(archiveDir, file), 'utf8');
              const data = JSON.parse(content);
              if (data.records && Array.isArray(data.records)) {
                allRecords = allRecords.concat(data.records);
                // –ë–µ—Ä—ë–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (data.lastUpdated && new Date(data.lastUpdated) > new Date(lastUpdated)) {
                  lastUpdated = data.lastUpdated;
                }
              }
            } catch (err) {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ${file}:`, err.message);
            }
          }

          const fullData = { lastUpdated, records: allRecords };
          fs.writeFileSync('fullData.json', JSON.stringify(fullData, null, 2), 'utf8');
          console.log(`‚úÖ fullData.json —Å–æ–∑–¥–∞–Ω (${allRecords.length} –∑–∞–ø–∏—Å–µ–π)`);
          EOF

      - name: Commit and push
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add fullData.json archive/
          
          if ! git diff --staged --quiet; then
            git commit -m "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–æ–≤ –∏–∑ Google Drive [$(date +'%Y-%m-%d')]"
            git push
            echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"
          else
            echo "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
          fi
